// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Int64 = require("bs-platform/lib/js/int64.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int64 = require("bs-platform/lib/js/caml_int64.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var input = "99\n128\n154\n160\n61\n107\n75\n38\n15\n11\n129\n94\n157\n84\n121\n14\n119\n48\n30\n10\n55\n108\n74\n104\n91\n45\n134\n109\n164\n66\n146\n44\n116\n89\n79\n32\n149\n1\n136\n58\n96\n7\n60\n23\n31\n3\n65\n110\n90\n37\n43\n115\n122\n52\n113\n123\n161\n50\n95\n150\n120\n101\n126\n151\n114\n127\n73\n82\n162\n140\n51\n144\n36\n4\n163\n85\n42\n59\n67\n64\n86\n49\n2\n145\n135\n22\n24\n33\n137\n16\n27\n70\n133\n130\n20\n21\n83\n143\n100\n41\n76\n17";

var three = Caml_int64.mk(3, 0);

var two = Caml_int64.mk(2, 0);

var one = Caml_int64.one;

var parsedInput = input.split("\n").map(Caml_format.caml_int64_of_string).sort(function (a, b) {
      return Caml_int64.to_int32(a) - Caml_int64.to_int32(b) | 0;
    });

function getAtKey(obj, key) {
  return Belt_Option.getWithDefault(Js_dict.get(obj, Int64.to_string(key)), Caml_int64.zero);
}

var result = Int64.to_string(Belt_Option.getExn(Caml_option.undefined_to_opt(Js_dict.values(Belt_Array.reduce(parsedInput, Js_dict.fromArray([[
                              "0",
                              Caml_int64.one
                            ]]), (function (computed, number) {
                          var passes = Caml_int64.add(Caml_int64.add(getAtKey(computed, Caml_int64.sub(number, one)), getAtKey(computed, Caml_int64.sub(number, two))), getAtKey(computed, Caml_int64.sub(number, three)));
                          computed[Int64.to_string(number)] = passes;
                          return computed;
                        }))).pop())));

console.log(result);

exports.input = input;
exports.three = three;
exports.two = two;
exports.one = one;
exports.parsedInput = parsedInput;
exports.getAtKey = getAtKey;
exports.result = result;
/* parsedInput Not a pure module */
