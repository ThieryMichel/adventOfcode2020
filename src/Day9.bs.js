// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

var input = "24\n27\n31\n3\n26\n29\n14\n16\n25\n15\n32\n6\n41\n22\n2\n1\n12\n8\n7\n4\n48\n13\n47\n34\n5\n18\n33\n11\n45\n3\n9\n10\n14\n21\n16\n15\n17\n20\n19\n6\n22\n23\n12\n8\n7\n26\n24\n13\n25\n27\n29\n18\n28\n35\n42\n30\n31\n32\n14\n33\n21\n46\n36\n37\n15\n19\n40\n63\n20\n22\n38\n67\n34\n39\n43\n41\n53\n29\n44\n45\n76\n84\n50\n35\n55\n42\n56\n74\n48\n73\n49\n58\n88\n51\n63\n64\n69\n68\n70\n71\n77\n78\n86\n85\n95\n90\n114\n138\n83\n91\n136\n206\n153\n97\n121\n119\n109\n115\n120\n131\n139\n137\n141\n207\n181\n155\n163\n173\n176\n174\n210\n180\n305\n192\n212\n369\n303\n228\n206\n224\n234\n229\n317\n251\n280\n350\n278\n296\n318\n379\n328\n336\n382\n497\n354\n372\n386\n440\n398\n418\n524\n587\n479\n430\n453\n707\n696\n812\n697\n664\n596\n574\n771\n722\n682\n1175\n690\n758\n1140\n726\n826\n784\n816\n897\n992\n883\n1066\n909\n1112\n1179\n1170\n1296\n1318\n2088\n1238\n1380\n1300\n1995\n1372\n1466\n1416\n1448\n1896\n1510\n1542\n2112\n1986\n1725\n1780\n3008\n1949\n1975\n3412\n2282\n2721\n2408\n2734\n2828\n2864\n3018\n3459\n2672\n2788\n2820\n2882\n2958\n3228\n3322\n4231\n3267\n4670\n3505\n3674\n4957\n4257\n4683\n4383\n5522\n4690\n5129\n5080\n5406\n5460\n5492\n5554\n6247\n8175\n5608\n10162\n8195\n9663\n6495\n6589\n6772\n7888\n10278\n8803\n9763\n8640\n13803\n9073\n10928\n10182\n9770\n10540\n10486\n10866\n10952\n11046\n14411\n14422\n12103\n17541\n16981\n18573\n13084\n18918\n24897\n14660\n16528\n17876\n17443\n17713\n18843\n19255\n19559\n19952\n24908\n20310\n35824\n21352\n25363\n24036\n23149\n31188\n25187\n26763\n27744\n29612\n39565\n38870\n40023\n32103\n57441\n38795\n38814\n35156\n36968\n38098\n39207\n39511\n44501\n41662\n43459\n64233\n91977\n47185\n65558\n48336\n51950\n54799\n66614\n90745\n82970\n71310\n76912\n67259\n69071\n74667\n79760\n72124\n73254\n86696\n134559\n86163\n120357\n85121\n115595\n109017\n95521\n146374\n99135\n100286\n103135\n106749\n121413\n140513\n136330\n138569\n139383\n141195\n172859\n142325\n145378\n151884\n157245\n171817\n186982\n198656\n171284\n237704\n180642\n202270\n194656\n195807\n243648\n240330\n305405\n209884\n276843\n274899\n310386\n275713\n279764\n302623\n483245\n287703\n393312\n297262\n309129\n367091\n471520\n412154\n375298\n455541\n376449\n382912\n668211\n470706\n493069\n450214\n484783\n585285\n486727\n977852\n550612\n555477\n578336\n590326\n584965\n596832\n606391\n673711\n664353\n1135059\n957433\n788603\n942268\n973281\n1005691\n759361\n1021318\n920920\n934997\n1378929\n1476397\n971510\n1037339\n1042204\n1796700\n1963894\n1133813\n1163301\n1175291\n1344326\n1385435\n1280102\n1338064\n1423714\n1934652\n2482088\n1760113\n1730871\n2285793\n1680281\n1972336\n2306355\n2421133\n1906507\n2008849\n2013714\n3844847\n2171152\n2761778\n3586788\n2501365\n2297114\n2338592\n3330221\n2618166\n2665537\n3010973\n5061092\n3103995\n3411152\n3440394\n3490984\n4269450\n4310828\n3652617\n3878843\n4807720\n3915356\n3920221\n4022563\n6889816\n4468266\n8460337\n6088153\n6806858\n4635706\n4915280\n4956758\n6931378\n6270783\n8936320\n6114968\n6515147\n6544389\n6851546\n7093011\n7143601\n7675180\n7531460\n7572838\n7794199\n8383622\n7835577\n7942784\n8490829\n11275124\n9103972\n11150853\n9550986\n9592464\n9872038\n11227541\n11071726\n12385751\n12630115\n14768191\n13658748\n13944557\n13395935\n13995147\n15248018\n14818781\n15104298\n19658746\n20778527\n18696436\n16219199\n15778361\n23309610\n23546133\n18654958\n18976010\n20622712\n22502153\n26625262\n20943764\n31323497\n36048062\n25015866\n28477529\n27054683\n27340492\n27391082\n28214716\n29923079\n39319148\n30882659\n31997560\n39640200\n34433319\n34474797\n61865879\n37630968\n39277670\n45995450\n39598722\n39919774\n45959630\n43445917\n64397876\n47998447\n54445765\n53230582\n59097375\n62648035\n68134490\n60805738\n76950116\n58137795\n69563279\n62880219\n77550742\n73710989\n68908116\n106136242\n72105765\n76908638\n121018014\n79197444\n106093952\n79518496\n83365691\n145084606\n96676499\n115878617\n120785830\n107676347\n111368377\n151624261\n118943533\n136591208\n127045911\n134985984\n127701074\n154459380\n131788335\n141013881\n142619105\n148426612\n156427134\n149014403\n281505291\n158715940\n180042190\n189459643\n239295604\n191042038\n228464834\n236664447\n300828020\n219044724\n226619880\n298985723\n255534741\n245989444\n373035355\n290504275\n259489409\n268714955\n272802216\n280802738\n283632986\n291045717\n394416056\n305441537\n307730343\n371084228\n338758130\n599549062\n380501681\n573630236\n410086762\n501267050\n527168722\n519872744\n528204364\n517665597\n373803594\n586244275\n574156492\n532291625\n540292147\n578243753\n1028435772\n685943218\n856423727\n574678703\n596487254\n613171880\n644199667\n646488473\n709842358\n986975474\n1101325214\n906095219\n1106448117\n937255484\n914095741\n891469191\n1145463505\n1049957222\n947960086\n948482297\n1152400245\n1072583772\n1106970328\n1118535900\n1299115098\n1600147354\n1510582995\n1828724675\n1221167176\n1209659134\n1323014238\n2220425353\n1594970770\n2066495986\n1820190960\n1797564410\n1805564932\n1998439519\n1851351225\n1839429277\n2355122639\n2169649473\n3405079861\n2542930856\n2021066069\n2662983240\n2179554100\n2225506228\n2328195034\n3219606695\n2821314530\n2430826310\n2532673372\n3060596453\n2804629904\n4702322845\n3392535180\n3415161730\n3617755370\n3603129342\n6150428742\n3644994209\n4167624311\n3860495346\n4009078750\n4190715542\n4200620169\n5337303276\n5865226357\n5593269825\n7921464859\n4405060328\n7032917100\n5845988040\n5252140840\n4963499682\n5491422763\n6135802714\n9136416972\n6219791634\n9692042932\n7770753653\n7018291072\n7220884712\n7248123551\n7505489555\n7654072959\n11223632642\n7869574096\n8199794292\n8391335711\n8605680497\n10556769507\n12509713835\n13364023478\n10454922445\n9368560010\n11337410803\n10215640522\n10743563603\n11099302396\n11711214397\n12355594348\n13238082706\n13440676346\n14672364031\n26678759052\n14469008263\n14726374267\n18613137699\n15159562514\n19911008689\n16069368388\n22571234870\n21724154358\n16997016208\n17974240507\n19584200532\n19823482455\n20112123613\n21314942918\n20467862406\n27406779191\n23656316868\n21842865999\n22810516793\n28113040377\n25593677054\n27909684609\n28167050613\n36515230030\n29195382530\n35653568920\n34310574799\n41753874688\n31228930902\n48279174226\n48580902783\n44534671151\n65410191556\n48377547015\n37558441039\n40052062938\n77474556756\n40579986019\n50977567406\n42310728405\n44653382792\n70220413014\n47436543053\n67744160932\n53503361663\n54789059584\n56076735222\n84732292565\n60424313432\n63505957329\n65539505701\n93030929807\n68787371941\n71280993840\n77610503977\n78138427058\n79869169444\n80632048957\n82211823831\n82890714424\n155612983814\n162342796542\n117656956067\n175242753638\n105077696224\n92089925845\n107860856485\n242986914570\n108292421247\n119042867364\n150999195772\n154171708264\n330855737452\n143677932759\n129045463030\n136820499541\n140068365781\n238503698238\n148891497817\n165102538255\n162080993275\n160501218401\n162843872788\n270203653027\n201933581788\n225949377314\n197167622069\n199950782330\n224120563588\n200382347092\n211132793209\n285711997358\n227335288611\n291889335818\n616567734810\n265865962571\n283217171294\n269113828811\n272723395789\n276888865322\n493822917606\n472137234815\n324924866063\n309392716218\n432284646302\n322582211676\n323345091189\n360011494857\n397118404399\n467799544359\n400333129422\n397549969161\n411083575539\n424502910680\n411515140301\n546002694133\n493201251182\n496449117422\n608142037357\n669404211075\n595305607465\n541837224600\n549612261111\n582116112007\n600233956511\n632737807407\n648269957252\n682593706533\n631974927894\n720132180837\n645927302865\n893999086583\n1019657177658\n1093907121755\n868132673781\n1328274218194\n809065109462\n822598715840\n836018050981\n904716391483\n1078565229429\n1315437788302\n1038286342022\n1131728373118\n1091449485711\n1123953336607\n1214853919414\n1149846217622\n1264709818540\n1232208884405\n1264712735301\n1454573643734\n1536691319377\n1940793482580\n1529197290299\n1454992412327\n2151385550776\n2353724130324\n2397329964080\n1631663825302\n3808297774058\n1645083160443\n3851903607814\n2116851571451\n1943002733505\n2578945748934\n2129735827733\n2215402822318\n2223177858829\n2877292044848\n2273799554229\n2364700137036\n2719705147628\n2793910025600\n2496921619706\n3996363962338\n2984189702626\n2991683731704\n6843587339518\n3086656237629\n3606377963103\n3276746985745\n3761399653035\n3574666558807\n3588085893948\n3761934731894\n3774818988176\n4708681576667\n4836556719079\n4072738561238\n5855692734679\n5374213664554\n4438580681147\n4496977413058\n5550546539974\n4638499691265\n5481111322332\n5216626767334\n5290831645306\n6661322796436\n5975873434330\n6070845940255\n6363403223374\n6674742131577\n6693034200732\n8103355376161\n6851413544552\n7162752452755\n11601333133902\n8483500564843\n9243046054226\n7847557549414\n11266705079636\n9077080372412\n8569715974296\n11406239274653\n8935558094205\n9135477104323\n10614373125595\n9855126458599\n9929331336571\n14352103871657\n11654234868680\n17307407326327\n13526155676129\n12046719374585\n14174201316416\n13038145354951\n17646796346708\n13544447745284\n19098172512825\n14014165997307\n15010310002169\n25440906396052\n16331058114257\n16417273523710\n20731315241092\n17505274068501\n17705193078619\n18071035198528\n18790684552804\n18864889430776\n18990603562922\n38038722567419\n19784457795170\n23455487012700\n25084864729536\n23700954243265\n28554757747453\n25572875050714\n31109180553479\n31828829907755\n31191244091992\n39455072393359\n31719359075926\n29024475999476\n32515584070670\n31341368116426\n34036251192876\n32748331637967\n33922547592211\n35210467147120\n35576309267029\n63939575729959\n36861719751332";

var parsedInput = input.split("\n").map(Caml_format.caml_float_of_string).map(function (prim) {
      return prim | 0;
    });

function isSumOfTwoNumbers(number, preamble) {
  return preamble.some(function (pnumber) {
              return preamble.filter(function (n) {
                            return n !== pnumber;
                          }).includes(number - pnumber | 0);
            });
}

function findWeakness(_input) {
  while(true) {
    var input = _input;
    var preamble = input.slice(0, 25);
    var currentNumber = Caml_array.get(input, 25);
    if (!isSumOfTwoNumbers(currentNumber, preamble)) {
      return currentNumber;
    }
    _input = input.slice(1);
    continue ;
  };
}

var weakness = findWeakness(parsedInput);

function findConscutiveNumbersThatSumTo(target, _input) {
  while(true) {
    var input = _input;
    var length = input.length;
    if (length === 0) {
      Js_exn.raiseError("Did not find solution");
    }
    var match = input.reduce((function (param, number) {
            var i = param[2];
            var status = param[1];
            var total = param[0];
            if (status !== 0) {
              return [
                      total,
                      status,
                      i
                    ];
            }
            var newTotal = total + number | 0;
            if (newTotal === target) {
              return [
                      newTotal,
                      /* Equal */2,
                      i
                    ];
            } else if (newTotal < target) {
              return [
                      newTotal,
                      /* Inferior */0,
                      i + 1 | 0
                    ];
            } else {
              return [
                      newTotal,
                      /* Greater */1,
                      i
                    ];
            }
          }), [
          0,
          /* Inferior */0,
          0
        ]);
    if (match[1] >= 2) {
      return input.slice(0, match[2]);
    }
    _input = input.slice(1);
    continue ;
  };
}

var numbers = findConscutiveNumbersThatSumTo(weakness, parsedInput.filter(function (value) {
          return value !== weakness;
        }));

function sumArrayExtremities(array) {
  var length = array.length;
  var first = Caml_array.get(array, 0);
  var last = Caml_array.get(array, length - 1 | 0);
  return first + last | 0;
}

var result = sumArrayExtremities(numbers);

console.log(result);

var preambleLength = 25;

exports.input = input;
exports.preambleLength = preambleLength;
exports.parsedInput = parsedInput;
exports.isSumOfTwoNumbers = isSumOfTwoNumbers;
exports.findWeakness = findWeakness;
exports.weakness = weakness;
exports.findConscutiveNumbersThatSumTo = findConscutiveNumbersThatSumTo;
exports.numbers = numbers;
exports.sumArrayExtremities = sumArrayExtremities;
exports.result = result;
/* parsedInput Not a pure module */
